package crud

import (
	"fmt"
	"gotempl/model"
	"reflect"
)

templ EventForm(events []model.Event) {
	<div class="container mx-auto p-4">
		<h1 class="text-2xl font-bold mb-4">Event Management</h1>
		<h2 class="text-xl font-bold mb-4">Create Event</h2>
		<form id="eventForm" action="/api/event" method="POST" onsubmit="submitAsJSON(event)" class="mb-8 p-4 bg-gray-100 rounded">
			<div class="flex flex-wrap -mx-2 mb-4">
				<div class="w-full md:w-1/3 px-2 mb-4 md:mb-0">
					<label for="id" class="block text-gray-700 font-bold mb-2">Event ID:</label>
					<input type="text" id="id" name="id" class="w-full px-3 py-2 border rounded-lg"/>
				</div>
				<div class="w-full md:w-1/3 px-2 mb-4 md:mb-0">
					<label for="eventname" class="block text-gray-700 font-bold mb-2">Eventname:</label>
					<input type="text" id="eventname" name="eventname" class="w-full px-3 py-2 border rounded-lg"/>
				</div>
				<div class="w-full md:w-1/3 px-2">
					<label for="role" class="block text-gray-700 font-bold mb-2">Role:</label>
					<select id="role" name="role" class="w-full px-3 py-2 border rounded-lg">
						<option value="event">Event</option>
						<option value="admin">Admin</option>
					</select>
				</div>
			</div>
			<div class="mt-4">
				<button id="submitBtn" type="submit" class="btn btn-primary">Submit</button>
			</div>
		</form>
		<div id="result"></div>
		<h2 class="text-xl font-bold mb-4">List Event</h2>
		<table class="w-full border-collapse border">
			<thead>
				<tr class="bg-gray-200">
					for _, field := range reflect.VisibleFields(reflect.TypeOf(model.Event{})) {
						<th class="border p-2">{ field.Name }</th>
					}
					<th class="border p-2">Actions</th>
				</tr>
			</thead>
			<tbody id="events-table-body">
				for _, event := range events {
					<tr>
						@DynamicEventRow(event)
					</tr>
				}
			</tbody>
		</table>
	</div>
	<script>
function submitAsJSON(event) {
    event.preventDefault();

    const form = document.getElementById('eventForm');
    const formData = new FormData(form);
    const jsonData = {};

    formData.forEach((value, key) => {
        if (key === 'id') {
            jsonData[key] = parseInt(value, 10);
        } else {
            jsonData[key] = value;
        }
    });


    fetch(form.action, {
        method: form.method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`${response.status} ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => { OkMsg() })
    .catch(error => { NotOkMsg() });
}

		function editEventHandler(button) {
			const row = button.closest('tr');
			const cells = row.getElementsByTagName('td');
			const event = {};

			// Gather data from the row
			for (let i = 0; i < cells.length - 1; i++) { // -1 to exclude the Actions cell
				const fieldName = document.querySelector('th:nth-child(' + (i+1) + ')').textContent;
				let value = cells[i].textContent.trim();
				if (fieldName === 'ID') {
					value = parseInt(value, 10);
				}
				event[fieldName] = cells[i].textContent.trim();
			}

			// Send the data to the server
			fetch('/api/event/' + event.ID, {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(event),
			})
			.then(response => response.json())
			.then(data => { OkMsg() })
			.catch((error) => {  NotOkMsg() });
		}

        function OkMsg(){

            document.getElementById('result').innerHTML = `
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <strong>Success!</strong> The form was submitted successfully.
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;

        setTimeout(function() {
            location.reload();
        }, 1250);

        }

        function NotOkMsg(){
             document.getElementById('result').innerHTML = `
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Error!</strong> ${error.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        }
	</script>
}

templ DynamicEventRow(event model.Event) {
	for _, field := range reflect.VisibleFields(reflect.TypeOf(event)) {
		<td contenteditable="true" class="border p-2">
			{ fmt.Sprintf("%v", reflect.ValueOf(event).FieldByName(field.Name).Interface()) }
		</td>
	}
	<td class="border p-2">
		<button onclick="editEventHandler(this)" class="btn btn-warning">Edit </button>
		<button
			hx-delete={ string(templ.URL(fmt.Sprintf("/api/event/%d", event.ID))) }
			hx-target="#events-table-body"
			hx-on::after-request="if(event.detail.successful) location.reload();"
			class="btn btn-danger"
		>
			Delete
		</button>
	</td>
}
